@using System.Collections
@using RDV.Domain.Entities
@using RDV.Domain.Enums
@using RDV.Domain.Interfaces.Repositories
@using RDV.Domain.IoC
@using RDV.Domain.Core
@using RDV.Web.Classes.Enums
@using RDV.Web.Classes.Extensions
@using RDV.Web.Models.Objects
@using RDV.Web.Models.UI
@model IEnumerable
@{
    ViewBag.Title = "Объекты";
    EstateTypes estateType = ViewBag.estateType;
    ObjectsListSection section = ViewBag.section;
    IEnumerable drafts = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.Draft);
    IEnumerable actives = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.Active);
    IEnumerable advances = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.Advance);
    IEnumerable deals = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.Deal);
    IEnumerable withdrawns = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.Withdrawn);
    IEnumerable tempWithdrawn = (Model as IEnumerable<ObjectItemModel>).Where(o => o.Status == (short)EstateStatuses.TemporarilyWithdrawn);
    var currentUser = ViewContext.CurrentUser();
    var dictionariesRep = Locator.GetService<IDictionariesRepository>();
    var companiesRep = Locator.GetService<ICompaniesRepository>();
    var canChangeStatus = true;
    switch (section)
    {
        case ObjectsListSection.MyObjects:
            canChangeStatus = currentUser.HasPermission(Permission.ChangeOwnObjectsStatus);
            break;
        case ObjectsListSection.CompanyObjects:
            canChangeStatus = currentUser.HasPermission(Permission.ChangeCompanyObjectsStatus);
            break;
        case ObjectsListSection.AllObjects:
            canChangeStatus = currentUser.HasPermission(Permission.ChangeAllObjectsStatus);
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}
@* DevExpress *@
@Html.DevExpress().GetScripts(new Script { ExtensionSuite = ExtensionSuite.All })
@Html.DevExpress().GetStyleSheets(new StyleSheet { ExtensionSuite = ExtensionSuite.All, Theme="Youthful" })

<script type="text/javascript">
    $("#main-content").css("width", "95%");
    
    function initDetails(id) {
        var selector = "#object-" + id + "-details";
        if ($(selector).hasClass("inited")) {
            return;
        }
        $(selector).addClass("inited");
        $("#object-"+id+"-details .tab-header-item").click(function (e) {
            $("#object-"+id+"-details .tab-header-item").removeClass("active");
            $("#object-" + id + "-details .tab").hide();
            $("#object-" + id + "-details " + $(this).attr("target")).show();
            $(this).addClass("active");
        });
    }
</script>
<div id="page">
    @* Заголовок страницы *@
    <div class="page-header">
        <div class="page-title">
            @ViewBag.Title
            <input type="hidden" id="hidIsActive" value="@ViewBag.IsActive" />
            <input type="hidden" id="hidObjIdRefreshFromEmail" value="@ViewBag.ObjIdRefreshFromEmail" />
            <input type="hidden" id="hidEstateType" value="@((short)ViewBag.estateType)" />
        </div>
        @Html.Partial("NavigationChain")
    </div>
    <div class="page-content">
        <div class="page-account-content">
            @* Разделы личного кабинета *@
            @Html.Partial("AccountTabs", new TabOptionsModel() { SelectedTab = "MyObjects-tab" })

            <div style="margin: 10px">
                <select id="estate-type-field">
                    @foreach (EstateTypes type in Enum.GetValues(typeof(EstateTypes)))
                    {
                        var s = (short)type;
                        <option value="@s" @(estateType == type ? "selected=selected" : "")>@type.GetEnumMemberName()</option>
                    }
                </select>
                @if (ViewContext.CurrentUser().HasPermission(Permission.EditOwnObjects))
                {
                    <text><input class="section-change" type="radio" name="section" style="margin-left: 15px" value="1" @(section == ObjectsListSection.MyObjects ? "checked=checked" : "")/>&nbsp; Мои объекты</text>
                }
                @if (ViewContext.CurrentUser().HasPermission(Permission.EditCompanyObjects))
                {
                    <text><input class="section-change" type="radio" name="section" style="margin-left: 10px" value="2" @(section == ObjectsListSection.CompanyObjects ? "checked=checked" : "")/>&nbsp; Объекты компании  </text>  
                }
                @if (ViewContext.CurrentUser().HasPermission(Permission.EditAllObjects))
                {
                    <text><input class="section-change" type="radio" name="section" style="margin-left: 10px" value="3" @(section == ObjectsListSection.AllObjects ? "checked=checked" : "")/>&nbsp; Все объекты    </text>
                }
            </div>
            <div style="margin: 10px">
                <div style="margin-bottom: 10px">
                @Html.DevExpress().Menu(menuSettings =>
                {
                    menuSettings.Name = "actionsMenu";
                    if (ViewContext.CurrentUser().HasPermission(Permission.AddObjects))
                    {
                        menuSettings.Items.Add(addItem =>
                        {
                            addItem.Name = "miAdd";
                            addItem.Text = "Добавить объект";
                            addItem.NavigateUrl = "javascript:showNewObjectDialog();";
                        });
                    }
                    menuSettings.Items.Add(mainItem =>
                    {
                        mainItem.Text = "Действия";
                        mainItem.Items.Add(item =>
                        {
                            item.Text = "Изменить статус объектов";
                            item.Name = "miChangeState";
                            item.NavigateUrl = "javascript:miChangeObjectsStatus();";
                        });
                        mainItem.Items.Add(item =>
                        {
                            item.Text = "Изменить агента объектов";
                            item.Name = "miChangeAgent";
                            item.NavigateUrl = "javascript:miChangeObjectsAgent();";
                        });
                        mainItem.Items.Add(item =>
                        {
                            item.Text = "Удалить объекты";
                            item.Name = "miDeleteObjects";
                            item.NavigateUrl = "javascript:miDeleteObjects();";
                        });
                        mainItem.Items.Add(item =>
                        {
                            item.Text = "Обновить объекты";
                            item.Name = "miRefreshObjects";
                            item.NavigateUrl = "javascript:miRefreshObjects();";
                        });
                    });
                }).GetHtml()
                </div>
                <div id="objects-table-wrapper">
                    <div id="objects-tabs-header">
                        <div class="header-tab active">
                            <a href="#draft-tab" sharp="drafts">Черновики </a>
                        </div>
                        <div class="header-tab">
                            <a href="#active-tab" sharp="active">Активные</a>
                        </div>
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewAdvanceObjectsList))
                        {
                            <div class="header-tab">
                                <a href="#advance-tab" sharp="advance">Внесен аванс</a>
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewDealObjectsList))
                        {
                            <div class="header-tab">
                                <a href="#deal-tab" sharp="deal">Сделка</a>
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewWithdrawObjectsList))
                        {
                            <div class="header-tab">
                                <a href="#withdraw-tab" sharp="withdrawn">Снято с продажи</a>
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewTemporaryWithdrawObjectsList))
                        {
                            <div class="header-tab">
                                <a href="#temopary-withdraw-tab" sharp="temp-withdrawn">Снято временно</a>
                            </div>    
                        }
                        <div class="clear">
                        </div>
                    </div>
                    <div id="objects-tabs">
                        <div class="object-tab object-tab-active" id="draft-tab">
                            @Html.Partial("ObjectsListPartial", new ObjectListModel()
                            {
                                Status = EstateStatuses.Draft,
                                Section = section,
                                EstateType = estateType,
                                Data = drafts
                            })
                        </div>
                        <div class="object-tab" id="active-tab" style="display: none">
                            @Html.Partial("ObjectsListPartial", new ObjectListModel()
                            {
                                Status = EstateStatuses.Active,
                                Section = section,
                                EstateType = estateType,
                                Data = actives
                            })
                        </div>
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewAdvanceObjectsList))
                        {
                            <div class="object-tab" id="advance-tab" style="display: none">
                                @Html.Partial("ObjectsListPartial", new ObjectListModel()
                                {
                                    Status = EstateStatuses.Advance,
                                    Section = section,
                                    EstateType = estateType,
                                    Data = advances
                                })
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewDealObjectsList))
                        {
                            <div class="object-tab" id="deal-tab" style="display: none">
                                @Html.Partial("ObjectsListPartial", new ObjectListModel()
                                {
                                    Status = EstateStatuses.Deal,
                                    Section = section,
                                    EstateType = estateType,
                                    Data = deals
                                })
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewWithdrawObjectsList))
                        {
                            <div class="object-tab" id="withdraw-tab" style="display: none">
                                @Html.Partial("ObjectsListPartial", new ObjectListModel()
                                {
                                    Status = EstateStatuses.Withdrawn,
                                    Section = section,
                                    EstateType = estateType,
                                    Data = withdrawns
                                })
                            </div>    
                        }
                        @if (ViewContext.CurrentUser().HasPermission(Permission.ViewTemporaryWithdrawObjectsList))
                        {
                            <div class="object-tab" id="temopary-withdraw-tab" style="display: none">
                                @Html.Partial("ObjectsListPartial", new ObjectListModel()
                                {
                                    Status = EstateStatuses.TemporarilyWithdrawn,
                                    Section = section,
                                    EstateType = estateType,
                                    Data = tempWithdrawn
                                })
                            </div>    
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#estate-type-field, .section-change").change(function () {
            var type = $("#estate-type-field").val();
            var section = $(".section-change:checked").val();
            window.location.href = "/account/objects?section=" + section + "&estateType=" + type;
        });
        
        @* Переключение закладок у объекта *@
        $("#objects-tabs-header .header-tab a").click(function () {
            $("#objects-tabs-header .header-tab").removeClass("active");
            $("#objects-tabs").find(".object-tab").removeClass("object-tab-active").hide();
            var target = $(this).attr("href");
            $(this).parent().addClass("active");
            $(target).addClass("object-tab-active").show();
            $(".statusSection").val($(this).attr("sharp"));
            return false;
        });

        if ($("#hidIsActive").val() == "True") {
            $("a[href='#active-tab']").trigger('click');
        }

        var objId = $("#hidObjIdRefreshFromEmail").val();
        if (objId != 0) {
            $.ajax({
                type: 'POST',
                url: '/account/objects/refresh',
                data: {
                    objectIds: objId,
                    estateType: $("#hidEstateType").val()
                },
                dataType: 'json',
                success: function (data) {
                    var url = "/account/objects";

                    if (data.section != null || data.section != undefined) {
                        url += "?section=" + data.section;

                        if (data.estateType != null || data.estateType != undefined) {
                            url += "&estateType=" + data.estateType;
                            url += "&isActive=true";
                        }
                    }

                    location.href = url;
                },
                error: function () {
                    alert("Не удалось обновить объекты");
                }
            });
        }
    });
    
    @* Удаляет параметер из урла *@
    function removeParam(key, sourceURL) {
        var rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            params_arr = queryString.split("&");
            for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                param = params_arr[i].split("=")[0];
                if (param === key) {
                    params_arr.splice(i, 1);
                }
            }
            rtn = rtn + "?" + params_arr.join("&");
        }
        return rtn;
    }

    @* Отображает диалог изменения статуса *@
    function showChangeObjectsStatusDialog(objectIds) {
        // Сбрасываем форму
        $("#object-status-ids-field").val(objectIds);
        $("#objects-status-field").val(-1);
        updateStatusFields();
        // Отображаем диалог
        var dialog = $("#change-objects-status-dialog").dialog({
            autoOpen: true,
            resizable: false,
            modal: true,
            buttons: {
                "Сохранить": function () {
                    if ($("#objects-status-field").val() == "-1") {
                        dialog.dialog("close");
                    } else {
                        if ($("#objects-status-field").val() == "5") {
                            yaCounter23575690.reachGoal("new_deal");
                        }
                        $("#change-object-status-form").submit();
                    }
                },
                "Отмена": function () {
                    dialog.dialog("close");
                }
            }
        });
    }

                @* Отображает диалог изменения агента *@
    function showChangeObjectsAgentDialog(objectIds) {
        // Сбрасываем форму
        $("#object-agent-ids-field").val(objectIds);
        $("#objects-agent-field").val(-1);
        // Отображаем диалог
        var dialog = $("#change-objects-agent-dialog").dialog({
            autoOpen: true,
            resizable: false,
            modal: true,
            buttons: {
                "Сохранить": function () {
                    if ($("#object-agent-field").val() == "-1") {
                        dialog.dialog("close");
                    } else {
                        $("#change-object-agent-form").submit();
                    }
                },
                "Отмена": function () {
                    dialog.dialog("close");
                }
            }
        });
    }

        @* Диалог создания нового объекта *@
    function showNewObjectDialog() {
        $("#new-object-dialog").find("#new-object-type-field").val(2);
        var dialog = $("#new-object-dialog").dialog({
            autoOpen: true,
            resizable: false,
            modal: true,
            buttons: {
                "Сохранить": function () {
                    yaCounter23575690.reachGoal("new_object");
                    $("#new-object-form").submit();

                },
                "Отмена": function () {
                    dialog.dialog("close");
                }
            }
        });
    }

        @* Диалог создания нового объекта *@
    function showDeleteObjectsDialog(objIds) {
        var ids = "";
        if ($.isArray(objIds)) {
            $.each(objIds, function(index, item) {
                ids += item + ",";
            });
        } else {
            ids = objIds;
        }
        var dialog = $("#delete-objects-dialog").dialog({
            autoOpen: true,
            resizable: false,
            modal: true,
            buttons: {
                "Да": function () {
                    $.ajax({
                        type: 'POST',
                        url: '/account/objects/delete',
                        data: {
                            objectIds: ids,
                            estateType: @((short)estateType)
                        },
                        dataType: 'json',
                        success: function (data) {
                            document.location.reload();
                        },
                        error: function () {
                            alert("Не удалось удалить объекты");
                        }
                    });
                },
                "Отмена": function () {
                    dialog.dialog("close");
                }
            }
        });
    }
    
    @* Диалог обновления объектов *@
    function showRefreshObjectsDialog(objIds) {
        var ids = "";
        if ($.isArray(objIds)) {
            $.each(objIds, function(index, item) {
                ids += item + ",";
            });
        } else {
            ids = objIds;
        }
        var dialog = $("#refresh-objects-dialog").dialog({
            autoOpen: true,
            resizable: false,
            modal: true,
            buttons: {
                "Да": function () {
                    $.ajax({
                        type: 'POST',
                        url: '/account/objects/refresh',
                        data: {
                            objectIds: ids,
                            estateType: @((short)estateType)
                        },
                        dataType: 'json',
                        success: function (data) {
                            document.location.reload();
                        },
                        error: function () {
                            alert("Не удалось обновить объекты");
                        }
                    });
                },
                "Отмена": function () {
                    dialog.dialog("close");
                }
            }
        });
    }
    
    // Изменяем статус объекта
    function changeObjectStatus(id) {
        showChangeObjectsStatusDialog(id);
    }
    
    // Изменяем агента объекта
    function changeObjectAgent(id) {
        showChangeObjectsAgentDialog(id);
    }
    // Удаление
    function deleteObjects(id) {
        showDeleteObjectsDialog(id);
    }
    // Обновление
    function refreshObjects(id) {
        showRefreshObjectsDialog(id);
    }
    // Изменение статуса объекктов - через меню
    function miChangeObjectsStatus() {
        var ids = getSelectedTableItems();
        showChangeObjectsStatusDialog(ids);
    }
    // Изменение агентов объекктов - через меню
    function miChangeObjectsAgent() {
        var ids = getSelectedTableItems();
        showChangeObjectsAgentDialog(ids);
    }
    // Удаление объекктов - через меню
    function miDeleteObjects() {
        var ids = getSelectedTableItems();
        showDeleteObjectsDialog(ids);
    }
    // Обновление объекктов - через меню
    function miRefreshObjects() {
        var ids = getSelectedTableItems();
        showRefreshObjectsDialog(ids);
    }
    
    function showStatusInfo(id) {
        $("#status-info-dialog").load("/objects/get-status-info", { id: id }, function() {
            var dialog = $("#status-info-dialog").dialog({
                autoOpen: true,
                resizable: false,
                modal: true,
                buttons: {
                    "OK": function () {
                        dialog.dialog("close");
                    }
                }
            });
        });
    }
    
    @* Диалог создания нового объекта *@
    function changePrice(objId) {
        $.post("/account/get-object-price", { id: objId }, function(data) {
            $("#change-price-dialog").find("[name='ownerPrice']").val(data.ownerPrice);
            $("#change-price-dialog").find("[name='price']").val(data.price);
            $("#change-price-dialog").find("[name='objectId']").val(data.id);
            var dialog = $("#change-price-dialog").dialog({
                autoOpen: true,
                resizable: false,
                modal: true,
                buttons: {
                    "Изменить": function () {
                        $("#change-price-form").submit();
                    },
                    "Отмена": function () {
                        dialog.dialog("close");
                    }
                }
            });    
        }, "json");
    }
</script>
@* COPY PASTE *@
@* Диалог изменения статуса объекта *@
<div id="change-objects-status-dialog" title="Изменение статуса объектов" class="dialog"
    style="display: none; padding-top: 20px">
    <form action="/account/objects/change-status" method="POST" id="change-object-status-form">
        <input type="hidden" name="objectIds" id="object-status-ids-field" value="-1" />
        <input type="hidden" name="location" value="@((short)section)"/>
        <input type="hidden" name="statusSection" value="drafts" class="statusSection" />
        <input type="hidden" name="estateType" value="@((short)estateType)" />
        <div class="editor-label">
            Новый статус
        </div>
        <div class="editor-field">
            <select id="objects-status-field" name="newStatus" class="field round">
                <option value="-1">Без изменений</option>
                @if (canChangeStatus)
                {
                    foreach (EstateStatuses status in Enum.GetValues(typeof(EstateStatuses)))
                    {
                    <option value="@((short)status)">@status.GetEnumMemberName()</option>
                    }
                }
                else if (section == ObjectsListSection.MyObjects)
                {
                    <option value="0">Черновик</option>   
                    <option value="1">Активный</option>   
                }
            </select>
        </div>
        <div id="removal-reason-wrapper">
            <div class="editor-label">
                Причина снятия
            </div>
            <div class="editor-field">
                <select id="removal-reason-field" name="removalReason" class="field round">
                    @foreach (var reason in dictionariesRep.GetDictionaryByName("removal_reasons").GetValues())
                    {
                        <option value="@reason.Id">@reason.Value</option>
                    }
                </select>
            </div>
        </div>
        <div id="delay-date-field-wrapper">
            <div class="editor-label">
                Дата, до которой отложено
            </div>
            <div class="editor-field">
                <input type="text" class="field round datepicker" id="delay-date-field" name="delayDate" value="@DateTimeZone.Now.AddDays(14).FormatDate()"/>
            </div>
        </div>
        <div id="counter-agent-type-wrapper">
            <div class="editor-label">
                Тип контрагента
            </div>
            <div class="editor-field">
                <select id="counter-agent-type-field" name="counteragentType" class="field round">
                    <option value="1">Компания - член РДВ</option>
                    <option value="2">Компания - не член РДВ</option>
                    <option value="3">Физическое лицо</option>
                </select>
            </div>
        </div>
        <div id="rdv-counter-agent-company-field-wrapper">
            <div class="editor-label">
                Компания контрагента (член РДВ)
            </div>
            <div class="editor-field">
                <select id="rdv-counter-agent-company-field" name="rdvCounterAgentCompany" class="field round">
                    @foreach (var comp in companiesRep.GetActiveCompanies())
                    {
                        <option value="@comp.Id">@comp.Name</option>
                    }
                </select>
            </div>
            <div class="editor-label">
                Агент компании
            </div>
            <div class="editor-field" id="rdv-agent-field-wrapper">
                <select id="rdv-agent-id-field" name="rdvAgentId">
                    <option value="-1">Дефолт</option>
                </select>
            </div>
        </div>
        <div id="counter-agent-company-field-wrapper">
            <div class="editor-label">
                Компания контрагента (не член РДВ)
            </div>
            <div class="editor-field">
                <input type="text" class="round field" id="counter-agent-company-field" name="counterAgentCompany"
                    placeholder="Введите наименование компании контрагента" />
            </div>
            <div class="editor-label">
                Агент компании
            </div>
            <div class="editor-field">
                <input type="hidden" id="non-rdv-agent-hidden" name="nonRdvAgentId" value="-1" />
                <input type="text" class="round field" id="non-rdv-agent-field" placeholder="Начните вводить имя агента" />
            </div>
        </div>
        <div id="counter-agent-client-field-wrapper">
            <div class="editor-label">
                Физическое лицо (клиент)
            </div>
            <div class="editor-field">
                <input type="hidden" id="counter-agent-client-id-field" name="clientId" value="-1" />
                <input type="text" class="round field client-field" id="counter-agent-client-field"
                    placeholder="Начните вводить имя клиента" />
            </div>
        </div>
        <div id="advance-date-field-wrapper">
            <div class="editor-label">
                Дата аванса
            </div>
            <div class="editor-field">
                <input type="text" class="field round datepicker" id="advance-date-field" name="advanceDate" value="@DateTimeZone.Now.FormatDate()"/>
            </div>
            <div class="editor-label">
                Дата завершения аванса
            </div>
            <div class="editor-field">
                <input type="text" class="field round datepicker" id="advance-end-date-field" name="advanceEndDate" value="@DateTimeZone.Now.AddDays(7).FormatDate()"/>
            </div>
        </div>
        <div id="deal-date-field-wrapper">
            <div class="editor-label">
                Дата сделки
            </div>
            <div class="editor-field">
                <input type="text" class="field round datepicker" id="deal-date-field" name="dealDate" value="@DateTimeZone.Now.FormatDate()"/>
            </div>
        </div>
        <div id="real-price-field-wrapper">
            <div class="editor-label">
                Окончательная стоимость
            </div>
            <div class="editor-field">
                <input type="text" class="field round" id="real-price-field" name="realPrice" value="" />
            </div>
        </div>
        <div id="mortage-bank-field-wrapper">
            <div class="editor-label">
                Ипотека банка
            </div>
            <div class="editor-field">
                <select id="mortage-bank-field" name="mortageBank" class="field round">
                    <option value="-1">Собственные средства</option>
                    @foreach (var bank in dictionariesRep.GetDictionaryByName("banks").GetValues())
                    {
                        <option value="@bank.Id">@bank.Value</option>
                    }
                </select>
            </div>
        </div>
    </form>
</div>
@* Диалог изменения агента у объекта *@
<div id="change-objects-agent-dialog" title="Изменение агента объектов" class="dialog"
    style="display: none; padding-top: 20px">
    <form action="/account/objects/change-agent" method="POST" id="change-object-agent-form">
        <input type="hidden" name="objectIds" id="object-agent-ids-field" value="-1" />
        <input type="hidden" name="location" value="@((short)section)"/>
        <input type="hidden" name="statusSection" value="drafts" class="statusSection" />
        <input type="hidden" name="estateType" value="@((short)estateType)" />
        <div class="editor-label">
            Новый агент
        </div>
        <div class="editor-field">
            <select id="objects-agent-field" name="newAgentId" class="field round">
                <option value="-1">Без изменений</option>
                @if (ViewContext.CurrentUser().Company != null)
                {
                    foreach (RDV.Domain.Entities.User user in ViewContext.CurrentUser().Company.Users)
                    {
                        <option value="@(user.Id)">@user.ToString()</option>
                    }   
                }
                
            </select>
        </div>
    </form>
</div>
@* Диалог добавления объекта *@
<div id="new-object-dialog" title="Новый объект" class="dialog" style="display: none;">
    <form action="/objects/add" method="POST" id="new-object-form">
        <div class="editor-label">
            Тип объекта
        </div>
        <div class="editor-field">
            <select id="new-object-type-field" name="type" class="field round">
                @foreach (EstateTypes objectType in Enum.GetValues(typeof(EstateTypes)))
                {
                    <option value="@((short)objectType)">@objectType.GetEnumMemberName()</option>
                }
            </select>
        </div>
        <div class="editor-label">
            Операция
        </div>
        <div class="editor-field">
            <select id="new-object-operation-field" name="operation" class="field round">
                @*
            @foreach (EstateOperations operations in Enum.GetValues(typeof(EstateOperations)))
            {
                <option value="@((short)operations)">@operations.GetEnumMemberName()</option>
            }*@
                <option value="@((short)EstateOperations.Selling)">Продажа</option>
            </select>
        </div>
    </form>
</div>
@* Диалог информации о статусе объекта *@
<div id="status-info-dialog" title="Информация о статусе" class="dialog" style="display: none;">
</div>
<div id="delete-objects-dialog" title="Удаление объектов" class="dialog" style="display: none">
    <p>
        Вы действительно хотите безвозвратно удалить эти объекты? Это действие нельзя будет
        отменить, объекты будут удалены навсегда.
    </p>
</div>
<div id="refresh-objects-dialog" title="Обновление объектов" class="dialog" style="display: none">
    <p>
        Вы действительно хотите обновить дату редактирования этих объектов?
    </p>
</div>
<div id="change-price-dialog" title="Изменение цены" class="dialog" style="display: none">
    <form id="change-price-form" method="post" action="/account/change-object-price">
        <input type="hidden" name="objectId" />
        <input type="hidden" name="location" value="@((short)section)"/>
        <input type="hidden" name="statusSection" value="drafts" class="statusSection" />
        <input type="hidden" name="estateType" value="@((short)estateType)" />
        <div class="editor-label">
            Цена хозяина
        </div>
        <div class="editor-field">
            <input type="text" class="field round" name="ownerPrice" placeholder="Введите цену хозяина" />
        </div>
        <div class="editor-label">
            Цена
        </div>
        <div class="editor-field">
            <input type="text" class="field round" name="price" placeholder="Введите цену объект" />
        </div>
    </form>
</div>
@* Диалог добавления нового агента не члена РДВ *@
<div class="dialog" style="display: none" title="Создание нового агента не члена рдв" id="new-non-rdv-agent-dialog">
    <form action="/account/new-non-rdv-agent" id="new-non-rdv-agent-form" method="POST">
        <div class="editor-label">
            Фамилия
        </div>
        <div class="editor-field">
            <input type="text" class="round field" id="nonrdvagent-last-name-field" maxlength="255"
                name="LastName" placeholder="Введите фамилию агента" />
        </div>
        <div class="editor-label">
            Имя
        </div>
        <div class="editor-field">
            <input type="text" class="round field field-required" id="nonrdvagent-first-name-field"
                maxlength="255" name="FirstName" placeholder="Введите имя агента" />
        </div>
        <div class="editor-label">
            Отчество
        </div>
        <div class="editor-field">
            <input type="text" class="round field" id="nonrdvagent-sur-name-field" maxlength="255"
                name="SurName" placeholder="Введите отчество агента" />
        </div>
        <div class="editor-label">
            Контактный телефон для связи
        </div>
        <div class="editor-field">
            <input type="text" class="round field field-required phone-field" id="nonrdvagent-phone-field" maxlength="255"
                name="Phone" placeholder="Введите телефон агента" />
        </div>
    </form>
    <script language="javascript" type="text/javascript">
        $(document).ready(function() {
            // Байндим валидацию
            validators.bindNonRdvAjaxFormValidators(submitNewNonRdvAgentForm);

            function showNewNonRdvAgentDialog(clientEditor) {
                var dialog = $("#new-non-rdv-agent-dialog").dialog({
                    autoOpen: true,
                    resizable: false,
                    modal: true,
                    width: 400,
                    buttons: {
                        "Сохранить": function () {
                            $("#new-non-rdv-agent-form").get(0).editor = clientEditor;
                            $("#new-non-rdv-agent-form").submit();
                        },
                        "Отмена": function () {
                            dialog.dialog("close");
                            $(clientEditor).val("");
                            $(clientEditor).parent().find("input[type='hidden']").val(-1);
                        }
                    }
                });
            }
            function submitNewNonRdvAgentForm(form) {
                $("#new-non-rdv-agent-form").ajaxSubmit({
                    dataType: 'json',
                    success: function (data) {
                        var editor = $("#new-non-rdv-agent-form").get(0).editor;
                        $(editor).parent().find("input[type='hidden']").val(data.id);
                        $(editor).val(data.name);
                        $("#new-non-rdv-agent-dialog").dialog("close");
                    },
                    error: function () {
                        alert("Ошибка при сохранении формы");
                    }
                });
            }
        
            // Байндинг автокомплита
            $("#non-rdv-agent-field").autocomplete({
                minLength: 3,
                source: '/account/company/non-rdv-agents-autocomplete',
                select: function (event, ui) {
                    if (ui.item.id == "-1") {
                        showNewNonRdvAgentDialog(this);
                    } else {
                        $(this).val(ui.item.name);
                        $(this).parent().find("input[type='hidden']").val(ui.item.id);
                    }
                    return false;
                }
            }).data("autocomplete")._renderItem = function (ul, item) {
                return $("<li>")
                    .data("item.autocomplete", item)
                    .append("<a>" + item.name + "</a>")
                    .appendTo(ul);
            };
        });
    </script>
</div>
<script language="javascript" type="text/javascript">
    function updateStatusFields() {
        var val = $("#objects-status-field").val();
        $("#removal-reason-wrapper").hide();
        $("#delay-date-field-wrapper").hide();
        $("#counter-agent-type-wrapper").hide();
        $("#rdv-counter-agent-company-field-wrapper").hide();
        $("#counter-agent-company-field-wrapper").hide();
        $("#counter-agent-client-field-wrapper").hide();
        $("#deal-date-field-wrapper").hide();
        $("#advance-date-field-wrapper").hide();
        $("#real-price-field-wrapper").hide();
        $("#mortage-bank-field-wrapper").hide();
        if (val == "4") {
            $("#removal-reason-wrapper").show();
        }
        if (val == "3") {
            $("#delay-date-field-wrapper").show();
        }
        if (val == "2" || val == "5") {
            $("#counter-agent-type-wrapper").show();
            $("#mortage-bank-field-wrapper").show();
            $("#real-price-field-wrapper").show();
            if (val == "2") {
                $("#advance-date-field-wrapper").show();
            } else if (val == "5") {
                $("#deal-date-field-wrapper").show();
            }
            updateCustomerTypeFields();
        }
    }
    
    function updateCustomerTypeFields() {
        var val = $("#counter-agent-type-field").val();
        $("#rdv-counter-agent-company-field-wrapper").hide();
        $("#counter-agent-company-field-wrapper").hide();
        $("#counter-agent-client-field-wrapper").hide();
        if (val == "1") {
            $("#rdv-counter-agent-company-field-wrapper").show();
            updateRdvAgentsList();
        } else if (val == "2") {
            $("#counter-agent-company-field-wrapper").show();
        } else if (val == "3") {
            $("#counter-agent-client-field-wrapper").show();
        }
    }

    function updateRdvAgentsList() {
        $("#rdv-agent-field-wrapper").load("/account/rdv-agents-list", { id: $("#rdv-counter-agent-company-field").val() });
    }

    $("#rdv-counter-agent-company-field").change(function() {
        updateRdvAgentsList();
    });

    $("#objects-status-field").change(function () {
        updateStatusFields();
    });
    $("#counter-agent-type-field").change(function () {
        updateCustomerTypeFields();
    });

    @* Автокомплит для контрагентов компаний не членов РДВ *@
    $("#counter-agent-company-field").autocomplete({
        minLength: 3,
        source: '/account/clients/counter-agent-companies'
    });
    
    @* Переключение закладок у объекта *@
    $("#objects-tabs-header .header-tab a").click(function() {
        $("#objects-tabs-header .header-tab").removeClass("active");
        $("#objects-tabs").find(".object-tab").removeClass("object-tab-active").hide();
        var target = $(this).attr("href");
        $(this).parent().addClass("active");
        $(target).addClass("object-tab-active").show();
        $(".statusSection").val($(this).attr("sharp"));
        return false;
    });

    validators.bindChangeObjectStatusFormValidators();
    validators.bindChangeObjectPriceValidators();
    
    @* Скрипты табличной части *@
    function contentTableScripts() {
        
        @* Отображает диалог смены статуса объекта при клике по панели инструментов *@
        $("#add-object-action").unbind("click").click(function(e) {
            showNewObjectDialog();
            return false;
        });

        @* Отображает диалог смены статуса объекта при клике по панели инструментов *@
        $("#change-object-status-action").unbind("click").click(function(e) {
            var ids = getSelectedTableItems();
            if (ids.length == 0) {
                return false;
            }
            var idsStr = "";
            $.each(ids, function(index, item) {
                idsStr += item + ',';
            });
            showChangeObjectsStatusDialog(idsStr);
            return false;
        });
        
        @* Отображает диалог смены агента объекта при клике по панели инструментов *@
        $("#change-objects-agent-action").unbind("click").click(function(e) {
            var ids = getSelectedTableItems();
            if (ids.length == 0) {
                return false;
            }
            var idsStr = "";
            $.each(ids, function(index, item) {
                idsStr += item + ',';
            });
            showChangeObjectsAgentDialog(idsStr);
            return false;
        });
        
        @* Выполняет переход на страницу сравнения объектов *@
        $("#compare-objects-action").unbind("click").click(function(e) {
            var ids = getSelectedTableItems();
            if (ids.length == 0) {
                return false;
            }
            if (ids.length > 4) {
                alert("Нельзя сравнить больше чем 4 объекта");
                return false;
            }
            var idsStr = "";
            $.each(ids, function(index, item) {
                idsStr += item + ',';
            });
            window.location.href='/account/objects/compare?objectIds='+idsStr;
            return false;
        });
        
        @* Отображает диалог удаления объектов *@
        $("#delete-objects-action").unbind("click").click(function(e) {
            var ids = getSelectedTableItems();
            if (ids.length == 0) {
                return false;
            }
            var idsStr = "";
            $.each(ids, function(index, item) {
                idsStr += item + ',';
            });
            showDeleteObjectsDialog(idsStr);
            return false;
        });
        
        @* Байндим событие клика по просмотру *@
        $(".icon-view").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            // window.location.href = "/objects/" + id + "/card";
        });
        
        @* Байндим событие клика по редактору *@
        $(".icon-edit").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            window.location.href = "/objects/" + id + "/service";
        });

                @* Меняем статус по клику на иконку в таблице *@
        $(".icon-change-state").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            showChangeObjectsStatusDialog(id);
        });
        
        @* Меняем агента по клику на иконку в таблице *@
        $(".icon-change-agent").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            showChangeObjectsAgentDialog(id);
        });

                @* Байндим кнопку отображения фотографий *@
        $(".icon-photos").unbind("click").click(function (e) {
            var id = $(this).parent().parent().data("item-id");
            $.ajax({
                url: '/objects/get-photos/' + id,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.count > 0) {
                        $.fancybox.open(data.images);
                    }
                },
                failure: function () {
                    alert('Ошибка при получении фотографий');
                }
            });
        });

        @* Байндим кнопку просмотра истории по объекту *@
        $(".icon-history").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            window.location.href = '/objects/' + id + "/history";
        });

        @* Байндим кнопку просмотра информации по текущему статусу объекта *@
        $(".icon-status-info").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            $("#status-info-dialog").load("/objects/get-status-info", { id: id }, function() {
                var dialog = $("#status-info-dialog").dialog({
                    autoOpen: true,
                    resizable: false,
                    modal: true,
                    buttons: {
                        "OK": function () {
                            dialog.dialog("close");
                        }
                    }
                });
            });
        });
        
        @* Меняем агента по клику на иконку в таблице *@
        $(".icon-money").unbind("click").click(function(e) {
            var id = $(this).parent().parent().data("item-id");
            showChangePriceDialog(id);
        });
        
        @* Диалог создания нового объекта *@
        function showChangePriceDialog(objId) {
            $.post("/account/get-object-price", { id: objId }, function(data) {
                $("#change-price-dialog").find("[name='ownerPrice']").val(data.ownerPrice);
                $("#change-price-dialog").find("[name='price']").val(data.price);
                $("#change-price-dialog").find("[name='objectId']").val(data.id);
                var dialog = $("#change-price-dialog").dialog({
                    autoOpen: true,
                    resizable: false,
                    modal: true,
                    buttons: {
                        "Изменить": function () {
                            $("#change-price-form").submit();
                        },
                        "Отмена": function () {
                            dialog.dialog("close");
                        }
                    }
                });    
            }, "json");
        }
    }
    $(document).ready(function () {
        contentTableScripts();
    });

    // Переключаем глобальную функцию получения выбранных элементов в таблице
    getSelectedTableItems = function() {
        var result = [];
        $(".object-tab-active .dxWeb_edtCheckBoxChecked_Youthful").each(function (index, item) {
            result.push($(item).parent().data("id"));
        });
        return result;
    };
        
    @* Байндинг экшена выбор фильтра *@
    $("#object-filter-action").click(function() {
        showObjectFilterDialog();
        return false;
    });
        
    @* байндинг переключений вкладок на основании статуса объекта *@
    var sharpIdx = window.location.href.indexOf("#");
    if (sharpIdx != -1) {
        var sharpData = window.location.href.substr(sharpIdx + 1);
        $("[sharp='" + sharpData + "']").click();
    } else {
        @if (section == ObjectsListSection.CompanyObjects)
        {
            <text>$("[sharp='active']").click();</text>
        }
    }
</script>
